// X flickering starfield
// X collisions
// X bullets
// X bullet collision with ship
// bullet collisions with each other
// can die by your own bullet
// hyperspace or shield
// explosions
// sounds

import processing.sound.*;
SoundFile[] explosions;

int windowSize = 600;
int numStars = 100;
float shipWidth = 15;
float shipHeight = shipWidth * 1.5;

PVector[] stars = new PVector[numStars];

class Bullet {
  PVector pos, vel, accel; //acceleration is only due to the sun's gravity affecting the bullets
  float bulletSize = 5;
  int lifeSpan = 200; // drawing cycles before bullet disappears
  int ttl; // how much time is left on a bullet's lifecycle
  float mass = .4;
  float gunForceMag = 1.5; 
  boolean live; // if false, this bullet is not active and can be replaced with a new ("live") bullet.
  color bulletColor;
  float collisionTolerance = shipWidth / 2;
  
  Bullet(color bulletCol) {
    live = false;
    ttl = lifeSpan;
    pos = new PVector (0,0,0);
    vel = new PVector (0,0,0);
    accel = new PVector (0,0,0);
    bulletColor = bulletCol;
  }
  
  boolean isLive() {
    return live;
  }

  void die() {
    live = false;
  }

  boolean collides (PVector objectPos) {
    float bulletDistance = pos.dist(objectPos);
    return (bulletDistance < collisionTolerance);
  }
  
  void fire(PVector initialPos, PVector initialVel, float shipRot) {
    float damper = 0.2; // how much weight we give to the actual ship's movement vs firing direction
    live = true;
    //println("bullet fire:", initialPos.x, initialVel);
    pos.set(initialPos);
    float shipRotRad = radians(shipRot);
    PVector fireVelocity = new PVector(sin(shipRotRad), -cos(shipRotRad));
    fireVelocity.normalize();
    pos.add(fireVelocity.x * shipHeight / 2, fireVelocity.y * shipHeight / 2);
    fireVelocity.mult(gunForceMag);
    PVector bulletVel = new PVector(initialVel.x * damper, initialVel.y * damper);
    bulletVel.add(fireVelocity);
    vel.set(bulletVel);
    ttl = lifeSpan;
  }
  
  void update() {
   accel.add(calculateGravityForce(pos,mass));
   vel.add(accel);
    pos.add(vel);
    if (insideSun(pos)) {
      live = false;
    }
    wrapAroundEdges(pos);

    ttl -= 1;
    if (ttl == 0) {
      ttl = lifeSpan;
      live = false; // bullet has "died"
    }
    accel.mult(0);
  }
  
  void render() {
    if (live) {
      fill(bulletColor);
      stroke(bulletColor);
      pushMatrix();
      translate(pos.x,pos.y);
      ellipse(-bulletSize / 2, -bulletSize / 2, bulletSize, bulletSize);
      popMatrix();
    }
  }
}

class Ship {
  PVector pos, vel, accel;
  float thrustConstant = 0.2;
  float maxSpeed, friction;
  color shipColor;
  int shipId;
  float rot, rotChange, rotIncrement;
  float accelFactor;
  int numBullets = 5;
  float mass = 1.0;
  boolean thrustOn;
  PVector startPos;
  Bullet[] bullets;
  
  Ship(int id, float x, float y, color sColor) {
    accel = new PVector(0,0);
    vel = new PVector(random(-0.5, 0.5), random(-0.5, 0.5));
    pos = new PVector(x,y);
    startPos = new PVector(x,y);
    maxSpeed = 5;
    shipWidth = 15;
    shipColor = sColor;    
    rot = 90;
    rotChange = 0;
    rotIncrement = 3;
    thrustOn = false;
    accelFactor = 0.009;
    shipId = id;
    friction = 0.9995; // even in outer space, you slow down! whaaaa?
    bullets = new Bullet[numBullets];
    for (int i = 0; i < numBullets; ++i) {
      bullets[i] = new Bullet(shipColor);
    }
  }
  
  void fireBullet(PVector pos, PVector vel) {
    for (Bullet bullet : bullets) {
      if (!bullet.isLive()) {
        bullet.fire(pos,vel,rot);
        break;
      }
    }
  }
  
  void update() {
    if (thrustOn) {
      accel.x = sin(radians(rot)) * accelFactor;
      accel.y = -cos(radians(rot)) * accelFactor;
    }
    accel.add(calculateGravityForce(pos,mass));
    vel.add(accel);
    vel.mult(friction);
    //if (shipId == 0) {
    //  println("speed:", vel.mag());
    //}
    vel.limit(maxSpeed);
    pos.add(vel);
    rot = rot + rotChange;
    wrapAroundEdges(pos);
    if (insideSun(pos)) {
      blowUp();
    }
    
    accel.mult(0);
  }
  
  void renderBullets() {
    for (Bullet bullet : bullets) {
      if (bullet.isLive()) {
        bullet.update();
        bullet.render();
      }
    }
  }

  boolean onALiveBullet(Ship opponentShip) {
    for (Bullet bullet : bullets) {
      if (bullet.isLive()) {
        if (bullet.collides(opponentShip.pos)) {
          bullet.die();
          return true;
        }
      }
    }
    return false;
  }
  
  
  void render() {
    pushMatrix();
    translate(pos.x,pos.y);
    rotate(radians(rot));
    float halfHeight = shipHeight / 2;
    float halfWidth = shipWidth / 2;
    fill(shipColor);
    stroke(shipColor);
    beginShape();
    vertex(-halfWidth,  halfHeight);
    vertex(0,  -halfHeight);
    vertex(halfWidth,  halfHeight);
    vertex(0, halfHeight / 2);
    endShape(CLOSE);
    if (thrustOn) {
      // draw flames
      float flicker = random(0,10) / 10 + 1; 
      fill(255 * flicker,255 * flicker,0);
      stroke(255 * flicker,255 * flicker,0);
      beginShape();
      vertex(-halfWidth / 2, halfHeight * 1.1);
      vertex(0, halfHeight * 1.6 * flicker);
      vertex(halfWidth / 2, halfHeight * 1.1);
      vertex(0, halfHeight * 1.4);
      endShape(CLOSE);
    }
    popMatrix();
    
    renderBullets();
  }
  
 
  void startTurning(float direction) {
    rotChange = direction * rotIncrement;
  }
  
  void stopTurning() {
    rotChange = 0;
  }
  
  void applyThrust() {
    thrustOn = true;
  }

  void cancelThrust() {
    thrustOn = false;
  }
  
  boolean hitOtherShip(Ship otherShip) {
    return (((abs(pos.x - otherShip.pos.x) < 10) && (abs(pos.y - otherShip.pos.y) < 10)));
  }
  
  void blowUp() {
    int randomExplosionSound = int(random(10));
    explosions[randomExplosionSound].play();
    pos.x = startPos.x;
    pos.y = startPos.y;
    vel.x = 0;
    vel.y = 0;
  }
  
  void fireBullet() {
    for (Bullet bullet: bullets) {
      if (!bullet.isLive()) {
        bullet.fire(pos,vel,rot);
        break;
      } 
    }
  }
  
}

Ship ship1, ship2;
 
void setup()
{
  // Load a soundfile from the /data folder of the sketch and play it back
  explosions = new SoundFile[10];
  explosions[0] = new SoundFile(this, "Explosion+1.mp3");
  explosions[1] = new SoundFile(this, "Explosion+2.mp3");
  explosions[2] = new SoundFile(this, "Explosion+3.mp3");
  explosions[3] = new SoundFile(this, "Explosion+4.mp3");
  explosions[4] = new SoundFile(this, "Explosion+5.mp3");
  explosions[5] = new SoundFile(this, "Explosion+6.mp3");
  explosions[6] = new SoundFile(this, "Explosion+7.mp3");
  explosions[7] = new SoundFile(this, "Explosion+9.mp3");
  explosions[8] = new SoundFile(this, "Explosion+10.mp3");
  explosions[9] = new SoundFile(this, "Explosion+11.mp3");
  
  size(600,600);
  background(255,255,255);
  mouseX = width / 2;
  mouseY = height / 2;
  int partWindow = windowSize /8;
  ship1 = new Ship(0, partWindow, partWindow, color(0,255,0));
  ship2 = new Ship(1, windowSize - partWindow,windowSize - partWindow, color(255,0,0));
  createStars();
}

void draw()
{
  background(0,0,0);
  pushMatrix();
  translate(windowSize/2, windowSize / 2);
  drawSun(25);  
  popMatrix();
  drawStars();
  
  if (ship1.hitOtherShip(ship2)) {
    ship1.blowUp();
    ship2.blowUp();
  }
  
  if (ship1.onALiveBullet(ship2)) {
    ship2.blowUp();
  }
  
  if (ship2.onALiveBullet(ship1)) {
    ship1.blowUp();
  }
  
  ship1.update();
  ship1.render();  
  
  ship2.update();
  ship2.render(); 
  
}

void keyPressed() {  
 switch (key) {
   case 's':
    ship1.applyThrust();
    break;
   case 'w':
    ship1.fireBullet();
    break;
   case 'a':
    ship1.startTurning(-1);
    break;
   case 'd':
    ship1.startTurning(1);
    break;
   case 'k':
    ship2.applyThrust();
    break;
   case 'i':
    ship2.fireBullet();
    break;
   case 'j':
     ship2.startTurning(-1);
     break;
   case 'l':
    ship2.startTurning(1);
    break;
  } 
    
}

void keyReleased() {
 switch (key) {
   case 's':
    ship1.cancelThrust();
    break;
   case 'w':
    //ship1.fireBullet();
    break;
   case 'a':
   case 'd':
    ship1.stopTurning();
     break;
   case 'k':
    ship2.cancelThrust();
    break;
   case 'i':
    //ship1.fireBullet();
    break;
   case 'j':
   case 'l':
     ship2.stopTurning();
     break;
  }
}

// wrap a moving object around screen edges
void wrapAroundEdges(PVector pos) {
  if (pos.x < 0) {
   pos.x = windowSize; 
  }
  if (pos.y < 0) {
    pos.y = windowSize;
  }
  if (pos.x > windowSize) {
   pos.x = 0; 
  }
  if (pos.y > windowSize) {
    pos.y = 0;
  }
}

boolean insideSun (PVector pos) {
  float halfWindow = windowSize / 2;
  return ((abs(halfWindow - pos.x) < 10) && (abs(halfWindow - pos.y) < 10));  
}

PVector calculateGravityForce(PVector pos, float mass) {
  PVector sunVector = new PVector(windowSize / 2, windowSize/2);
  float distToSun = pos.dist(sunVector);
  PVector shipToSunVector = PVector.sub(sunVector, pos);
  shipToSunVector.normalize();
  float G = 32;
  float gravityFactor = (1.0 / (pow(distToSun, 1.57))) * G * mass;
  PVector gravityVector = PVector.mult(shipToSunVector, gravityFactor);

  return gravityVector;
}
 
 
void createStars() {
  for (int i = 0; i < numStars; ++i) {
    stars[i] = new PVector (random(0,windowSize), random (0, windowSize));
  }
}

void drawStars() {
  float flicker;
  for (int i = 0; i < numStars; ++i) {
    flicker = (random(0,5) / 10) + 0.5;
    stroke(150 * flicker, 150 * flicker, 255 * flicker);
    point(stars[i].x, stars[i].y);
  }
}

void drawSun(float size) {
  fill(255,255, 0);
  stroke(255,205,0);
  int fc = frameCount;
  int mod = 30;
  float modF = 105.0;
  float pulse = ((fc % mod) / modF) + 1.0;
  //println((fc % 10) / 10.0);
  ellipse(0,0,size * pulse,size * pulse);
}
// X flickering starfield
// X collisions
// X bullets
// X bullet collision with ship
// bullet collisions with each other
// explosions
// sounds

int windowSize = 600;
int numStars = 100;
float shipWidth = 15;
float shipHeight = shipWidth * 1.5;

PVector[] stars = new PVector[numStars];

class Bullet {
  PVector pos, vel, accel; //acceleration is only due to the sun's gravity affecting the bullets
  float bulletSize = 5;
  int lifeSpan = 200; // drawing cycles before bullet disappears
  int ttl; // how much time is left on a bullet's lifecycle
  float mass = .4;
  float gunForceMag = 1.5; 
  boolean live; // if false, this bullet is not active and can be replaced with a new ("live") bullet.
  color bulletColor;
  float collisionTolerance = shipWidth / 2;
  
  Bullet(color bulletCol) {
    live = false;
    ttl = lifeSpan;
    pos = new PVector (0,0,0);
    vel = new PVector (0,0,0);
    accel = new PVector (0,0,0);
    bulletColor = bulletCol;
  }
  
  boolean isLive() {
    return live;
  }

  void die() {
    live = false;
  }

  boolean collides (PVector objectPos) {
    float bulletDistance = pos.dist(objectPos);
    return (bulletDistance < collisionTolerance);
  }
  
  void fire(PVector initialPos, PVector initialVel, float shipRot) {
    float damper = 0.2; // how much weight we give to the actual ship's movement vs firing direction
    live = true;
    //println("bullet fire:", initialPos.x, initialVel);
    pos.set(initialPos);
    float shipRotRad = radians(shipRot);
    PVector fireVelocity = new PVector(sin(shipRotRad), -cos(shipRotRad));
    fireVelocity.normalize();
    pos.add(fireVelocity.x * shipHeight / 2, fireVelocity.y * shipHeight / 2);
    fireVelocity.mult(gunForceMag);
    PVector bulletVel = new PVector(initialVel.x * damper, initialVel.y * damper);
    bulletVel.add(fireVelocity);
    vel.set(bulletVel);
    ttl = lifeSpan;
  }
  
  void update() {
   accel.add(calculateGravityForce(pos,mass));
   vel.add(accel);
    pos.add(vel);
    if (insideSun(pos)) {
      live = false;
    }
    wrapAroundEdges(pos);

    ttl -= 1;
    if (ttl == 0) {
      ttl = lifeSpan;
      live = false; // bullet has "died"
    }
    accel.mult(0);
  }
  
  void render() {
    if (live) {
      fill(bulletColor);
      stroke(bulletColor);
      pushMatrix();
      translate(pos.x,pos.y);
      ellipse(-bulletSize / 2, -bulletSize / 2, bulletSize, bulletSize);
      popMatrix();
    }
  }
}

class Ship {
  PVector pos, vel, accel;
  float thrustConstant = 0.2;
  float maxSpeed, friction;
  color shipColor;
  int shipId;
  float rot, rotChange, rotIncrement;
  float accelFactor;
  int numBullets = 5;
  float mass = 1.0;
  boolean thrustOn;
  PVector startPos;
  Bullet[] bullets;
  
  Ship(int id, float x, float y, color sColor) {
    accel = new PVector(0,0);
    vel = new PVector(random(-0.5, 0.5), random(-0.5, 0.5));
    pos = new PVector(x,y);
    startPos = new PVector(x,y);
    maxSpeed = 5;
    shipWidth = 15;
    shipColor = sColor;    
    rot = 90;
    rotChange = 0;
    rotIncrement = 3;
    thrustOn = false;
    accelFactor = 0.009;
    shipId = id;
    friction = 0.9995; // even in outer space, you slow down! whaaaa?
    bullets = new Bullet[numBullets];
    for (int i = 0; i < numBullets; ++i) {
      bullets[i] = new Bullet(shipColor);
    }
  }
  
  void fireBullet(PVector pos, PVector vel) {
    for (Bullet bullet : bullets) {
      if (!bullet.isLive()) {
        bullet.fire(pos,vel,rot);
        break;
      }
    }
  }
  
  void update() {
    if (thrustOn) {
      accel.x = sin(radians(rot)) * accelFactor;
      accel.y = -cos(radians(rot)) * accelFactor;
    }
    accel.add(calculateGravityForce(pos,mass));
    vel.add(accel);
    vel.mult(friction);
    //if (shipId == 0) {
    //  println("speed:", vel.mag());
    //}
    vel.limit(maxSpeed);
    pos.add(vel);
    rot = rot + rotChange;
    wrapAroundEdges(pos);
    if (insideSun(pos)) {
      resetToStart();
    }
    
    accel.mult(0);
  }
  
  void renderBullets() {
    for (Bullet bullet : bullets) {
      if (bullet.isLive()) {
        bullet.update();
        bullet.render();
      }
    }
  }

  boolean onALiveBullet(Ship opponentShip) {
    for (Bullet bullet : bullets) {
      if (bullet.isLive()) {
        if (bullet.collides(opponentShip.pos)) {
          bullet.die();
          return true;
        }
      }
    }
    return false;
  }
  
  
  void render() {
    pushMatrix();
    translate(pos.x,pos.y);
    rotate(radians(rot));
    float halfHeight = shipHeight / 2;
    float halfWidth = shipWidth / 2;
    fill(shipColor);
    stroke(shipColor);
    beginShape();
    vertex(-halfWidth,  halfHeight);
    vertex(0,  -halfHeight);
    vertex(halfWidth,  halfHeight);
    vertex(0, halfHeight / 2);
    endShape(CLOSE);
    if (thrustOn) {
      // draw flames
      float flicker = random(0,10) / 10 + 1; 
      fill(255 * flicker,255 * flicker,0);
      stroke(255 * flicker,255 * flicker,0);
      beginShape();
      vertex(-halfWidth / 2, halfHeight * 1.1);
      vertex(0, halfHeight * 1.6 * flicker);
      vertex(halfWidth / 2, halfHeight * 1.1);
      vertex(0, halfHeight * 1.4);
      endShape(CLOSE);
    }
    popMatrix();
    
    renderBullets();
  }
  
 
  void startTurning(float direction) {
    rotChange = direction * rotIncrement;
  }
  
  void stopTurning() {
    rotChange = 0;
  }
  
  void applyThrust() {
    thrustOn = true;
  }

  void cancelThrust() {
    thrustOn = false;
  }
  
  boolean hitOtherShip(Ship otherShip) {
    return (((abs(pos.x - otherShip.pos.x) < 10) && (abs(pos.y - otherShip.pos.y) < 10)));
  }
  
  void resetToStart() {
    pos.x = startPos.x;
    pos.y = startPos.y;
    vel.x = 0;
    vel.y = 0;
  }
  
  void fireBullet() {
    for (Bullet bullet: bullets) {
      if (!bullet.isLive()) {
        bullet.fire(pos,vel,rot);
        break;
      } 
    }
  }
  
}

Ship ship1, ship2;
 
void setup()
{
  size(600,600);
  background(255,255,255);
  mouseX = width / 2;
  mouseY = height / 2;
  int partWindow = windowSize /8;
  ship1 = new Ship(0, partWindow, partWindow, color(0,255,0));
  ship2 = new Ship(1, windowSize - partWindow,windowSize - partWindow, color(255,0,0));
  createStars();
}

void draw()
{
  background(0,0,0);
  pushMatrix();
  translate(windowSize/2, windowSize / 2);
  drawSun(25);  
  popMatrix();
  drawStars();
  
  if (ship1.hitOtherShip(ship2)) {
    ship1.resetToStart();
    ship2.resetToStart();
  }
  
  if (ship1.onALiveBullet(ship2)) {
    ship2.resetToStart();
  }
  
  if (ship2.onALiveBullet(ship1)) {
    ship1.resetToStart();
  }
  
  ship1.update();
  ship1.render();  
  
  ship2.update();
  ship2.render(); 
  
}

void keyPressed() {  
 switch (key) {
   case 's':
    ship1.applyThrust();
    break;
   case 'w':
    ship1.fireBullet();
    break;
   case 'a':
    ship1.startTurning(-1);
    break;
   case 'd':
    ship1.startTurning(1);
    break;
   case 'k':
    ship2.applyThrust();
    break;
   case 'i':
    ship2.fireBullet();
    break;
   case 'j':
     ship2.startTurning(-1);
     break;
   case 'l':
    ship2.startTurning(1);
    break;
  } 
    
}

void keyReleased() {
 switch (key) {
   case 's':
    ship1.cancelThrust();
    break;
   case 'w':
    //ship1.fireBullet();
    break;
   case 'a':
   case 'd':
    ship1.stopTurning();
     break;
   case 'k':
    ship2.cancelThrust();
    break;
   case 'i':
    //ship1.fireBullet();
    break;
   case 'j':
   case 'l':
     ship2.stopTurning();
     break;
  }
}

// wrap a moving object around screen edges
void wrapAroundEdges(PVector pos) {
  if (pos.x < 0) {
   pos.x = windowSize; 
  }
  if (pos.y < 0) {
    pos.y = windowSize;
  }
  if (pos.x > windowSize) {
   pos.x = 0; 
  }
  if (pos.y > windowSize) {
    pos.y = 0;
  }
}

boolean insideSun (PVector pos) {
  float halfWindow = windowSize / 2;
  return ((abs(halfWindow - pos.x) < 10) && (abs(halfWindow - pos.y) < 10));  
}

PVector calculateGravityForce(PVector pos, float mass) {
  PVector sunVector = new PVector(windowSize / 2, windowSize/2);
  float distToSun = pos.dist(sunVector);
  PVector shipToSunVector = PVector.sub(sunVector, pos);
  shipToSunVector.normalize();
  float G = 32;
  float gravityFactor = (1.0 / (pow(distToSun, 1.57))) * G * mass;
  PVector gravityVector = PVector.mult(shipToSunVector, gravityFactor);

  return gravityVector;
}
 
 
void createStars() {
  for (int i = 0; i < numStars; ++i) {
    stars[i] = new PVector (random(0,windowSize), random (0, windowSize));
  }
}

void drawStars() {
  float flicker;
  for (int i = 0; i < numStars; ++i) {
    flicker = (random(0,5) / 10) + 0.5;
    stroke(150 * flicker, 150 * flicker, 255 * flicker);
    point(stars[i].x, stars[i].y);
  }
}

void drawSun(float size) {
  fill(255,255, 0);
  stroke(255,205,0);
  int fc = frameCount;
  int mod = 20;
  float modF = 305.0;
  float pulse = ((fc % mod) / modF) + 1.0;
  //println((fc % 10) / 10.0);
  ellipse(0,0,size * pulse,size * pulse);
}
